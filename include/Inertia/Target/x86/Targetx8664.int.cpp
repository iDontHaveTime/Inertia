#include "../include/Inertia/Target/x86/Targetx8664.int.hpp"
#include <format>
// This file is auto generated by Inertia
namespace InertiaTarget{
namespace Inertiax86_64{
TargetInstructionResult mov64rr(std::ostream& osout, const RegisterBase* dest, const RegisterBase* src){
	constexpr std::string_view mov64rr_fmt = "movq %{}, %{}";
	std::format_to(std::ostreambuf_iterator<char>(osout), mov64rr_fmt, src->name, dest->name);
	return {
		.result = dest,
		.clobbers = {},
		.clobberSize = 0
	};
}
TargetInstructionResult mov32rr(std::ostream& osout, const RegisterBase* dest, const RegisterBase* src){
	constexpr std::string_view mov32rr_fmt = "movl %{}, %{}";
	std::format_to(std::ostreambuf_iterator<char>(osout), mov32rr_fmt, src->name, dest->name);
	return {
		.result = dest,
		.clobbers = {},
		.clobberSize = 0
	};
}
TargetInstructionResult mov16rr(std::ostream& osout, const RegisterBase* dest, const RegisterBase* src){
	constexpr std::string_view mov16rr_fmt = "movw %{}, %{}";
	std::format_to(std::ostreambuf_iterator<char>(osout), mov16rr_fmt, src->name, dest->name);
	return {
		.result = dest,
		.clobbers = {},
		.clobberSize = 0
	};
}
TargetInstructionResult mov8rr(std::ostream& osout, const RegisterBase* dest, const RegisterBase* src){
	constexpr std::string_view mov8rr_fmt = "movb %{}, %{}";
	std::format_to(std::ostreambuf_iterator<char>(osout), mov8rr_fmt, src->name, dest->name);
	return {
		.result = dest,
		.clobbers = {},
		.clobberSize = 0
	};
}
TargetInstructionResult mul64r(std::ostream& osout, const Register_rax* rax, const Register_rdx* rdx, const RegisterBase* src){
	constexpr std::string_view mul64r_fmt = "mulq %{}";
	std::format_to(std::ostreambuf_iterator<char>(osout), mul64r_fmt, src->name);
	return {
		.result = rax,
		.clobbers = {rdx},
		.clobberSize = 1
	};
}
}
}
