#ifndef INERTIA_GENERATED_x86_64
#define INERTIA_GENERATED_x86_64
// This file is auto generated by Inertia

#include "Inertia/Target/TargetBase.hpp"
namespace InertiaTarget{
namespace Inertiax86_64{
enum class RegisterClassx86_64{
	GPR64,
	GPR32,
	GPR16,
	GPR8,
};
struct Register_rax : public RegisterBase{
	uint64_t need_rex : 1;
	Register_rax() : RegisterBase("rax", 0, 64){
		need_rex = 1;
	}
};
struct Register_eax : public RegisterBase{
	uint64_t need_rex : 1;
	Register_eax() : RegisterBase("eax", 1, 32){
		need_rex = 0;
	}
};
struct Register_ax : public RegisterBase{
	uint64_t need_rex : 1;
	Register_ax() : RegisterBase("ax", 2, 16){
		need_rex = 0;
	}
};
struct Register_al : public RegisterBase{
	uint64_t need_rex : 1;
	Register_al() : RegisterBase("al", 3, 8){
		need_rex = 0;
	}
};
struct TargetBasex86_64 : public TargetBase{
	Register_rax* rax;
	Register_eax* eax;
	Register_ax* ax;
	Register_al* al;
	TargetBasex86_64() : TargetBase(Inertia::Endian::IN_LITTLE_ENDIAN){
		init();
	}
	void init() override{
		rax = new Register_rax();
		reg_database["rax"] = rax;
		eax = new Register_eax();
		reg_database["eax"] = eax;
		ax = new Register_ax();
		reg_database["ax"] = ax;
		al = new Register_al();
		reg_database["al"] = al;
		eax->set_parent(rax);
		ax->set_parent(eax);
		al->set_parent(ax);
	}
	~TargetBasex86_64() override{
		delete rax;
		delete eax;
		delete ax;
		delete al;
	}
};
}
}

#endif
