#ifndef INERTIA_GENERATED_AArch64
#define INERTIA_GENERATED_AArch64
// This file is auto generated by Inertia

#include "Inertia/Target/TargetBase.hpp"
namespace InertiaTarget{
namespace InertiaAArch64{
enum class RegisterClassAArch64{
	GPR64,
	GPR32,
};
struct Register_x0 : public RegisterBase{
	Register_x0() : RegisterBase("x0", (int)RegisterClassAArch64::GPR64, 64){}
};
struct Register_w0 : public RegisterBase{
	Register_w0() : RegisterBase("w0", (int)RegisterClassAArch64::GPR64, 32){}
};
struct TargetBaseAArch64 : public TargetBase{
	char* buff = nullptr;
	Register_x0* x0;
	Register_w0* w0;
	TargetBaseAArch64() : TargetBase(Inertia::Endian::IN_LITTLE_ENDIAN){
		init();
	}
	void init() override{
		buff = new char[(sizeof(Register_x0)+sizeof(Register_w0))];
		char* buff_ptr = buff;
		x0 = new(buff_ptr) Register_x0();
		buff_ptr += sizeof(Register_x0);
		reg_database["x0"] = x0;
		w0 = new(buff_ptr) Register_w0();
		buff_ptr += sizeof(Register_w0);
		reg_database["w0"] = w0;
		w0->set_parent(x0);
	}
	~TargetBaseAArch64() noexcept override{
		w0->~Register_w0();
		x0->~Register_x0();
		delete[] buff;
	}
};
}
}

#endif
