// this file implicitly includes x86/Targetx8664reg.int
target = x86 // sets the target's name
endian = little // sets the target's endian
pointer = 64

// instructions design
instr mov64rr(GPR64 dest, GPR64 src){
    format = "movq %{}, %{}"(src.name, dest.name)
    result = dest
}

instr mov32rr(GPR32 dest, GPR32 src){
    format = "movl %{}, %{}"(src.name, dest.name)
    result = dest
}

instr mov16rr(GPR16 dest, GPR16 src){
    format = "movw %{}, %{}"(src.name, dest.name)
    result = dest
}

instr mov8rr(GPR8 dest, GPR8 src){
    format = "movb %{}, %{}"(src.name, dest.name)
    result = dest
}

instr mul64r(rax, rdx, GPR64 src){
    format = "mulq %{}"(src.name)
    result = rax
    clobber = [rdx]
}

instr mul32r(eax, edx, GPR32 src){
    format = "mull %{}"(src.name)
    result = eax
    clobber = [edx]
}

instr mul16r(ax, dx, GPR16 src){
    format = "mulw %{}"(src.name)
    result = ax
    clobber = [dx]
}

instr mul8r(al, GPR8 src){
    format = "mulb %{}"(src.name)
    result = al
}

instr mov8i8r(GPR8 dest, imm<8> val){
    format = "movb ${}, %{}"(val, dest.name)
    result = dest
}

instr mov16i16r(GPR16 dest, imm<16> val){
    format = "movw ${}, %{}"(val, dest.name)
    result = dest
}

instr mov32i32r(GPR32 dest, imm<32> val){
    format = "movl ${}, %{}"(val, dest.name)
    result = dest
}

instr mov64i32r(GPR64 dest, imm<32> val){
    format = "movq ${}, %{}"(val, dest.name)
    result = dest
}

instr mov64i64r(GPR64 dest, imm<64> val){
    format = "movabsq ${}, %{}"(val, dest.name)
    result = dest
}

instr xor8rr(GPR8 gpr1, GPR8 gpr2){
    format = "xorb %{}, %{}"(gpr1.name, gpr2.name)
}

instr xor16rr(GPR16 gpr1, GPR16 gpr2){
    format = "xorw %{}, %{}"(gpr1.name, gpr2.name)
}

instr xor32rr(GPR32 gpr1, GPR32 gpr2){
    format = "xorl %{}, %{}"(gpr1.name, gpr2.name)
}

instr xor64rr(GPR64 gpr1, GPR64 gpr2){
    format = "xorq %{}, %{}"(gpr1.name, gpr2.name)
}

instr lea64mlrr(string label, GPR64 offset, GPR64 dest){
    format = "leaq {}(%{}), %{}"(label, offset.name, dest.name)
    result = dest
}

instr ret(){
    format = "retq"()
}
