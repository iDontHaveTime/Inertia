#ifndef INERTIA_GENERATED_x86_64
#define INERTIA_GENERATED_x86_64
// This file is auto generated by Inertia

#include <format>
#include "Inertia/Target/TargetBase.hpp"
namespace InertiaTarget{
namespace Inertiax86_64{
enum class RegisterClassx86_64{
	GPR64,
	GPR32,
	GPR16,
	GPR8,
};
struct Register_rax : public RegisterBase{
	uint64_t regid : 3;
	Register_rax() : RegisterBase("rax", (int)RegisterClassx86_64::GPR64, 64){
		regid = 0;
	}
};
struct Register_eax : public RegisterBase{
	uint64_t regid : 3;
	Register_eax() : RegisterBase("eax", (int)RegisterClassx86_64::GPR32, 32){
		regid = 0;
	}
};
struct Register_ax : public RegisterBase{
	uint64_t regid : 3;
	Register_ax() : RegisterBase("ax", (int)RegisterClassx86_64::GPR16, 16){
		regid = 0;
	}
};
struct Register_al : public RegisterBase{
	uint64_t regid : 3;
	Register_al() : RegisterBase("al", (int)RegisterClassx86_64::GPR8, 8){
		regid = 0;
	}
};
struct Register_rcx : public RegisterBase{
	uint64_t regid : 3;
	Register_rcx() : RegisterBase("rcx", (int)RegisterClassx86_64::GPR64, 64){
		regid = 1;
	}
};
struct Register_ecx : public RegisterBase{
	uint64_t regid : 3;
	Register_ecx() : RegisterBase("ecx", (int)RegisterClassx86_64::GPR32, 32){
		regid = 1;
	}
};
struct Register_cx : public RegisterBase{
	uint64_t regid : 3;
	Register_cx() : RegisterBase("cx", (int)RegisterClassx86_64::GPR16, 16){
		regid = 1;
	}
};
struct Register_cl : public RegisterBase{
	uint64_t regid : 3;
	Register_cl() : RegisterBase("cl", (int)RegisterClassx86_64::GPR8, 8){
		regid = 1;
	}
};
struct Register_rdx : public RegisterBase{
	uint64_t regid : 3;
	Register_rdx() : RegisterBase("rdx", (int)RegisterClassx86_64::GPR64, 64){
		regid = 2;
	}
};
struct Register_edx : public RegisterBase{
	uint64_t regid : 3;
	Register_edx() : RegisterBase("edx", (int)RegisterClassx86_64::GPR32, 32){
		regid = 2;
	}
};
struct Register_dx : public RegisterBase{
	uint64_t regid : 3;
	Register_dx() : RegisterBase("dx", (int)RegisterClassx86_64::GPR16, 16){
		regid = 2;
	}
};
struct Register_dl : public RegisterBase{
	uint64_t regid : 3;
	Register_dl() : RegisterBase("dl", (int)RegisterClassx86_64::GPR8, 8){
		regid = 2;
	}
};
struct Register_rbx : public RegisterBase{
	uint64_t regid : 3;
	Register_rbx() : RegisterBase("rbx", (int)RegisterClassx86_64::GPR64, 64){
		regid = 3;
	}
};
struct Register_ebx : public RegisterBase{
	uint64_t regid : 3;
	Register_ebx() : RegisterBase("ebx", (int)RegisterClassx86_64::GPR32, 32){
		regid = 3;
	}
};
struct Register_bx : public RegisterBase{
	uint64_t regid : 3;
	Register_bx() : RegisterBase("bx", (int)RegisterClassx86_64::GPR16, 16){
		regid = 3;
	}
};
struct Register_bl : public RegisterBase{
	uint64_t regid : 3;
	Register_bl() : RegisterBase("bl", (int)RegisterClassx86_64::GPR8, 8){
		regid = 3;
	}
};
struct Register_rsp : public RegisterBase{
	uint64_t regid : 3;
	Register_rsp() : RegisterBase("rsp", (int)RegisterClassx86_64::GPR64, 64){
		regid = 4;
	}
};
struct Register_esp : public RegisterBase{
	uint64_t regid : 3;
	Register_esp() : RegisterBase("esp", (int)RegisterClassx86_64::GPR32, 32){
		regid = 4;
	}
};
struct Register_sp : public RegisterBase{
	uint64_t regid : 3;
	Register_sp() : RegisterBase("sp", (int)RegisterClassx86_64::GPR16, 16){
		regid = 4;
	}
};
struct Register_spl : public RegisterBase{
	uint64_t regid : 3;
	Register_spl() : RegisterBase("spl", (int)RegisterClassx86_64::GPR8, 8){
		regid = 4;
	}
};
struct Register_rbp : public RegisterBase{
	uint64_t regid : 3;
	Register_rbp() : RegisterBase("rbp", (int)RegisterClassx86_64::GPR64, 64){
		regid = 5;
	}
};
struct Register_ebp : public RegisterBase{
	uint64_t regid : 3;
	Register_ebp() : RegisterBase("ebp", (int)RegisterClassx86_64::GPR32, 32){
		regid = 5;
	}
};
struct Register_bp : public RegisterBase{
	uint64_t regid : 3;
	Register_bp() : RegisterBase("bp", (int)RegisterClassx86_64::GPR16, 16){
		regid = 5;
	}
};
struct Register_bpl : public RegisterBase{
	uint64_t regid : 3;
	Register_bpl() : RegisterBase("bpl", (int)RegisterClassx86_64::GPR8, 8){
		regid = 5;
	}
};
struct Register_rsi : public RegisterBase{
	uint64_t regid : 3;
	Register_rsi() : RegisterBase("rsi", (int)RegisterClassx86_64::GPR64, 64){
		regid = 6;
	}
};
struct Register_esi : public RegisterBase{
	uint64_t regid : 3;
	Register_esi() : RegisterBase("esi", (int)RegisterClassx86_64::GPR32, 32){
		regid = 6;
	}
};
struct Register_si : public RegisterBase{
	uint64_t regid : 3;
	Register_si() : RegisterBase("si", (int)RegisterClassx86_64::GPR16, 16){
		regid = 6;
	}
};
struct Register_sil : public RegisterBase{
	uint64_t regid : 3;
	Register_sil() : RegisterBase("sil", (int)RegisterClassx86_64::GPR8, 8){
		regid = 6;
	}
};
struct Register_rdi : public RegisterBase{
	uint64_t regid : 3;
	Register_rdi() : RegisterBase("rdi", (int)RegisterClassx86_64::GPR64, 64){
		regid = 7;
	}
};
struct Register_edi : public RegisterBase{
	uint64_t regid : 3;
	Register_edi() : RegisterBase("edi", (int)RegisterClassx86_64::GPR32, 32){
		regid = 7;
	}
};
struct Register_di : public RegisterBase{
	uint64_t regid : 3;
	Register_di() : RegisterBase("di", (int)RegisterClassx86_64::GPR16, 16){
		regid = 7;
	}
};
struct Register_dil : public RegisterBase{
	uint64_t regid : 3;
	Register_dil() : RegisterBase("dil", (int)RegisterClassx86_64::GPR8, 8){
		regid = 7;
	}
};
struct Register_r8 : public RegisterBase{
	uint64_t regid : 3;
	Register_r8() : RegisterBase("r8", (int)RegisterClassx86_64::GPR64, 64){
		regid = 0;
	}
};
struct Register_r8d : public RegisterBase{
	uint64_t regid : 3;
	Register_r8d() : RegisterBase("r8d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 0;
	}
};
struct Register_r8w : public RegisterBase{
	uint64_t regid : 3;
	Register_r8w() : RegisterBase("r8w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 0;
	}
};
struct Register_r8b : public RegisterBase{
	uint64_t regid : 3;
	Register_r8b() : RegisterBase("r8b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 0;
	}
};
struct Register_r9 : public RegisterBase{
	uint64_t regid : 3;
	Register_r9() : RegisterBase("r9", (int)RegisterClassx86_64::GPR64, 64){
		regid = 1;
	}
};
struct Register_r9d : public RegisterBase{
	uint64_t regid : 3;
	Register_r9d() : RegisterBase("r9d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 1;
	}
};
struct Register_r9w : public RegisterBase{
	uint64_t regid : 3;
	Register_r9w() : RegisterBase("r9w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 1;
	}
};
struct Register_r9b : public RegisterBase{
	uint64_t regid : 3;
	Register_r9b() : RegisterBase("r9b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 1;
	}
};
struct Register_r10 : public RegisterBase{
	uint64_t regid : 3;
	Register_r10() : RegisterBase("r10", (int)RegisterClassx86_64::GPR64, 64){
		regid = 2;
	}
};
struct Register_r10d : public RegisterBase{
	uint64_t regid : 3;
	Register_r10d() : RegisterBase("r10d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 2;
	}
};
struct Register_r10w : public RegisterBase{
	uint64_t regid : 3;
	Register_r10w() : RegisterBase("r10w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 2;
	}
};
struct Register_r10b : public RegisterBase{
	uint64_t regid : 3;
	Register_r10b() : RegisterBase("r10b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 2;
	}
};
struct Register_r11 : public RegisterBase{
	uint64_t regid : 3;
	Register_r11() : RegisterBase("r11", (int)RegisterClassx86_64::GPR64, 64){
		regid = 3;
	}
};
struct Register_r11d : public RegisterBase{
	uint64_t regid : 3;
	Register_r11d() : RegisterBase("r11d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 3;
	}
};
struct Register_r11w : public RegisterBase{
	uint64_t regid : 3;
	Register_r11w() : RegisterBase("r11w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 3;
	}
};
struct Register_r11b : public RegisterBase{
	uint64_t regid : 3;
	Register_r11b() : RegisterBase("r11b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 3;
	}
};
struct Register_r12 : public RegisterBase{
	uint64_t regid : 3;
	Register_r12() : RegisterBase("r12", (int)RegisterClassx86_64::GPR64, 64){
		regid = 4;
	}
};
struct Register_r12d : public RegisterBase{
	uint64_t regid : 3;
	Register_r12d() : RegisterBase("r12d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 4;
	}
};
struct Register_r12w : public RegisterBase{
	uint64_t regid : 3;
	Register_r12w() : RegisterBase("r12w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 4;
	}
};
struct Register_r12b : public RegisterBase{
	uint64_t regid : 3;
	Register_r12b() : RegisterBase("r12b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 4;
	}
};
struct Register_r13 : public RegisterBase{
	uint64_t regid : 3;
	Register_r13() : RegisterBase("r13", (int)RegisterClassx86_64::GPR64, 64){
		regid = 5;
	}
};
struct Register_r13d : public RegisterBase{
	uint64_t regid : 3;
	Register_r13d() : RegisterBase("r13d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 5;
	}
};
struct Register_r13w : public RegisterBase{
	uint64_t regid : 3;
	Register_r13w() : RegisterBase("r13w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 5;
	}
};
struct Register_r13b : public RegisterBase{
	uint64_t regid : 3;
	Register_r13b() : RegisterBase("r13b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 5;
	}
};
struct Register_r14 : public RegisterBase{
	uint64_t regid : 3;
	Register_r14() : RegisterBase("r14", (int)RegisterClassx86_64::GPR64, 64){
		regid = 6;
	}
};
struct Register_r14d : public RegisterBase{
	uint64_t regid : 3;
	Register_r14d() : RegisterBase("r14d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 6;
	}
};
struct Register_r14w : public RegisterBase{
	uint64_t regid : 3;
	Register_r14w() : RegisterBase("r14w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 6;
	}
};
struct Register_r14b : public RegisterBase{
	uint64_t regid : 3;
	Register_r14b() : RegisterBase("r14b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 6;
	}
};
struct Register_r15 : public RegisterBase{
	uint64_t regid : 3;
	Register_r15() : RegisterBase("r15", (int)RegisterClassx86_64::GPR64, 64){
		regid = 7;
	}
};
struct Register_r15d : public RegisterBase{
	uint64_t regid : 3;
	Register_r15d() : RegisterBase("r15d", (int)RegisterClassx86_64::GPR32, 32){
		regid = 7;
	}
};
struct Register_r15w : public RegisterBase{
	uint64_t regid : 3;
	Register_r15w() : RegisterBase("r15w", (int)RegisterClassx86_64::GPR16, 16){
		regid = 7;
	}
};
struct Register_r15b : public RegisterBase{
	uint64_t regid : 3;
	Register_r15b() : RegisterBase("r15b", (int)RegisterClassx86_64::GPR8, 8){
		regid = 7;
	}
};
struct TargetBasex86_64 : public TargetBase{
	char* buff = nullptr;
	bool avx = false;
	Register_rax* rax;
	Register_eax* eax;
	Register_ax* ax;
	Register_al* al;
	Register_rcx* rcx;
	Register_ecx* ecx;
	Register_cx* cx;
	Register_cl* cl;
	Register_rdx* rdx;
	Register_edx* edx;
	Register_dx* dx;
	Register_dl* dl;
	Register_rbx* rbx;
	Register_ebx* ebx;
	Register_bx* bx;
	Register_bl* bl;
	Register_rsp* rsp;
	Register_esp* esp;
	Register_sp* sp;
	Register_spl* spl;
	Register_rbp* rbp;
	Register_ebp* ebp;
	Register_bp* bp;
	Register_bpl* bpl;
	Register_rsi* rsi;
	Register_esi* esi;
	Register_si* si;
	Register_sil* sil;
	Register_rdi* rdi;
	Register_edi* edi;
	Register_di* di;
	Register_dil* dil;
	Register_r8* r8;
	Register_r8d* r8d;
	Register_r8w* r8w;
	Register_r8b* r8b;
	Register_r9* r9;
	Register_r9d* r9d;
	Register_r9w* r9w;
	Register_r9b* r9b;
	Register_r10* r10;
	Register_r10d* r10d;
	Register_r10w* r10w;
	Register_r10b* r10b;
	Register_r11* r11;
	Register_r11d* r11d;
	Register_r11w* r11w;
	Register_r11b* r11b;
	Register_r12* r12;
	Register_r12d* r12d;
	Register_r12w* r12w;
	Register_r12b* r12b;
	Register_r13* r13;
	Register_r13d* r13d;
	Register_r13w* r13w;
	Register_r13b* r13b;
	Register_r14* r14;
	Register_r14d* r14d;
	Register_r14w* r14w;
	Register_r14b* r14b;
	Register_r15* r15;
	Register_r15d* r15d;
	Register_r15w* r15w;
	Register_r15b* r15b;
	TargetBasex86_64() : TargetBase(Inertia::Endian::IN_LITTLE_ENDIAN){
		init();
	}
	void init() override{
		buff = new char[(sizeof(Register_rax)+sizeof(Register_eax)+sizeof(Register_ax)+sizeof(Register_al)+sizeof(Register_rcx)+sizeof(Register_ecx)+sizeof(Register_cx)+sizeof(Register_cl)+sizeof(Register_rdx)+sizeof(Register_edx)+sizeof(Register_dx)+sizeof(Register_dl)+sizeof(Register_rbx)+sizeof(Register_ebx)+sizeof(Register_bx)+sizeof(Register_bl)+sizeof(Register_rsp)+sizeof(Register_esp)+sizeof(Register_sp)+sizeof(Register_spl)+sizeof(Register_rbp)+sizeof(Register_ebp)+sizeof(Register_bp)+sizeof(Register_bpl)+sizeof(Register_rsi)+sizeof(Register_esi)+sizeof(Register_si)+sizeof(Register_sil)+sizeof(Register_rdi)+sizeof(Register_edi)+sizeof(Register_di)+sizeof(Register_dil)+sizeof(Register_r8)+sizeof(Register_r8d)+sizeof(Register_r8w)+sizeof(Register_r8b)+sizeof(Register_r9)+sizeof(Register_r9d)+sizeof(Register_r9w)+sizeof(Register_r9b)+sizeof(Register_r10)+sizeof(Register_r10d)+sizeof(Register_r10w)+sizeof(Register_r10b)+sizeof(Register_r11)+sizeof(Register_r11d)+sizeof(Register_r11w)+sizeof(Register_r11b)+sizeof(Register_r12)+sizeof(Register_r12d)+sizeof(Register_r12w)+sizeof(Register_r12b)+sizeof(Register_r13)+sizeof(Register_r13d)+sizeof(Register_r13w)+sizeof(Register_r13b)+sizeof(Register_r14)+sizeof(Register_r14d)+sizeof(Register_r14w)+sizeof(Register_r14b)+sizeof(Register_r15)+sizeof(Register_r15d)+sizeof(Register_r15w)+sizeof(Register_r15b))];
		char* buff_ptr = buff;
		rax = new(buff_ptr) Register_rax();
		buff_ptr += sizeof(Register_rax);
		reg_database["rax"] = rax;
		eax = new(buff_ptr) Register_eax();
		buff_ptr += sizeof(Register_eax);
		reg_database["eax"] = eax;
		ax = new(buff_ptr) Register_ax();
		buff_ptr += sizeof(Register_ax);
		reg_database["ax"] = ax;
		al = new(buff_ptr) Register_al();
		buff_ptr += sizeof(Register_al);
		reg_database["al"] = al;
		rcx = new(buff_ptr) Register_rcx();
		buff_ptr += sizeof(Register_rcx);
		reg_database["rcx"] = rcx;
		ecx = new(buff_ptr) Register_ecx();
		buff_ptr += sizeof(Register_ecx);
		reg_database["ecx"] = ecx;
		cx = new(buff_ptr) Register_cx();
		buff_ptr += sizeof(Register_cx);
		reg_database["cx"] = cx;
		cl = new(buff_ptr) Register_cl();
		buff_ptr += sizeof(Register_cl);
		reg_database["cl"] = cl;
		rdx = new(buff_ptr) Register_rdx();
		buff_ptr += sizeof(Register_rdx);
		reg_database["rdx"] = rdx;
		edx = new(buff_ptr) Register_edx();
		buff_ptr += sizeof(Register_edx);
		reg_database["edx"] = edx;
		dx = new(buff_ptr) Register_dx();
		buff_ptr += sizeof(Register_dx);
		reg_database["dx"] = dx;
		dl = new(buff_ptr) Register_dl();
		buff_ptr += sizeof(Register_dl);
		reg_database["dl"] = dl;
		rbx = new(buff_ptr) Register_rbx();
		buff_ptr += sizeof(Register_rbx);
		reg_database["rbx"] = rbx;
		ebx = new(buff_ptr) Register_ebx();
		buff_ptr += sizeof(Register_ebx);
		reg_database["ebx"] = ebx;
		bx = new(buff_ptr) Register_bx();
		buff_ptr += sizeof(Register_bx);
		reg_database["bx"] = bx;
		bl = new(buff_ptr) Register_bl();
		buff_ptr += sizeof(Register_bl);
		reg_database["bl"] = bl;
		rsp = new(buff_ptr) Register_rsp();
		buff_ptr += sizeof(Register_rsp);
		reg_database["rsp"] = rsp;
		esp = new(buff_ptr) Register_esp();
		buff_ptr += sizeof(Register_esp);
		reg_database["esp"] = esp;
		sp = new(buff_ptr) Register_sp();
		buff_ptr += sizeof(Register_sp);
		reg_database["sp"] = sp;
		spl = new(buff_ptr) Register_spl();
		buff_ptr += sizeof(Register_spl);
		reg_database["spl"] = spl;
		rbp = new(buff_ptr) Register_rbp();
		buff_ptr += sizeof(Register_rbp);
		reg_database["rbp"] = rbp;
		ebp = new(buff_ptr) Register_ebp();
		buff_ptr += sizeof(Register_ebp);
		reg_database["ebp"] = ebp;
		bp = new(buff_ptr) Register_bp();
		buff_ptr += sizeof(Register_bp);
		reg_database["bp"] = bp;
		bpl = new(buff_ptr) Register_bpl();
		buff_ptr += sizeof(Register_bpl);
		reg_database["bpl"] = bpl;
		rsi = new(buff_ptr) Register_rsi();
		buff_ptr += sizeof(Register_rsi);
		reg_database["rsi"] = rsi;
		esi = new(buff_ptr) Register_esi();
		buff_ptr += sizeof(Register_esi);
		reg_database["esi"] = esi;
		si = new(buff_ptr) Register_si();
		buff_ptr += sizeof(Register_si);
		reg_database["si"] = si;
		sil = new(buff_ptr) Register_sil();
		buff_ptr += sizeof(Register_sil);
		reg_database["sil"] = sil;
		rdi = new(buff_ptr) Register_rdi();
		buff_ptr += sizeof(Register_rdi);
		reg_database["rdi"] = rdi;
		edi = new(buff_ptr) Register_edi();
		buff_ptr += sizeof(Register_edi);
		reg_database["edi"] = edi;
		di = new(buff_ptr) Register_di();
		buff_ptr += sizeof(Register_di);
		reg_database["di"] = di;
		dil = new(buff_ptr) Register_dil();
		buff_ptr += sizeof(Register_dil);
		reg_database["dil"] = dil;
		r8 = new(buff_ptr) Register_r8();
		buff_ptr += sizeof(Register_r8);
		reg_database["r8"] = r8;
		r8d = new(buff_ptr) Register_r8d();
		buff_ptr += sizeof(Register_r8d);
		reg_database["r8d"] = r8d;
		r8w = new(buff_ptr) Register_r8w();
		buff_ptr += sizeof(Register_r8w);
		reg_database["r8w"] = r8w;
		r8b = new(buff_ptr) Register_r8b();
		buff_ptr += sizeof(Register_r8b);
		reg_database["r8b"] = r8b;
		r9 = new(buff_ptr) Register_r9();
		buff_ptr += sizeof(Register_r9);
		reg_database["r9"] = r9;
		r9d = new(buff_ptr) Register_r9d();
		buff_ptr += sizeof(Register_r9d);
		reg_database["r9d"] = r9d;
		r9w = new(buff_ptr) Register_r9w();
		buff_ptr += sizeof(Register_r9w);
		reg_database["r9w"] = r9w;
		r9b = new(buff_ptr) Register_r9b();
		buff_ptr += sizeof(Register_r9b);
		reg_database["r9b"] = r9b;
		r10 = new(buff_ptr) Register_r10();
		buff_ptr += sizeof(Register_r10);
		reg_database["r10"] = r10;
		r10d = new(buff_ptr) Register_r10d();
		buff_ptr += sizeof(Register_r10d);
		reg_database["r10d"] = r10d;
		r10w = new(buff_ptr) Register_r10w();
		buff_ptr += sizeof(Register_r10w);
		reg_database["r10w"] = r10w;
		r10b = new(buff_ptr) Register_r10b();
		buff_ptr += sizeof(Register_r10b);
		reg_database["r10b"] = r10b;
		r11 = new(buff_ptr) Register_r11();
		buff_ptr += sizeof(Register_r11);
		reg_database["r11"] = r11;
		r11d = new(buff_ptr) Register_r11d();
		buff_ptr += sizeof(Register_r11d);
		reg_database["r11d"] = r11d;
		r11w = new(buff_ptr) Register_r11w();
		buff_ptr += sizeof(Register_r11w);
		reg_database["r11w"] = r11w;
		r11b = new(buff_ptr) Register_r11b();
		buff_ptr += sizeof(Register_r11b);
		reg_database["r11b"] = r11b;
		r12 = new(buff_ptr) Register_r12();
		buff_ptr += sizeof(Register_r12);
		reg_database["r12"] = r12;
		r12d = new(buff_ptr) Register_r12d();
		buff_ptr += sizeof(Register_r12d);
		reg_database["r12d"] = r12d;
		r12w = new(buff_ptr) Register_r12w();
		buff_ptr += sizeof(Register_r12w);
		reg_database["r12w"] = r12w;
		r12b = new(buff_ptr) Register_r12b();
		buff_ptr += sizeof(Register_r12b);
		reg_database["r12b"] = r12b;
		r13 = new(buff_ptr) Register_r13();
		buff_ptr += sizeof(Register_r13);
		reg_database["r13"] = r13;
		r13d = new(buff_ptr) Register_r13d();
		buff_ptr += sizeof(Register_r13d);
		reg_database["r13d"] = r13d;
		r13w = new(buff_ptr) Register_r13w();
		buff_ptr += sizeof(Register_r13w);
		reg_database["r13w"] = r13w;
		r13b = new(buff_ptr) Register_r13b();
		buff_ptr += sizeof(Register_r13b);
		reg_database["r13b"] = r13b;
		r14 = new(buff_ptr) Register_r14();
		buff_ptr += sizeof(Register_r14);
		reg_database["r14"] = r14;
		r14d = new(buff_ptr) Register_r14d();
		buff_ptr += sizeof(Register_r14d);
		reg_database["r14d"] = r14d;
		r14w = new(buff_ptr) Register_r14w();
		buff_ptr += sizeof(Register_r14w);
		reg_database["r14w"] = r14w;
		r14b = new(buff_ptr) Register_r14b();
		buff_ptr += sizeof(Register_r14b);
		reg_database["r14b"] = r14b;
		r15 = new(buff_ptr) Register_r15();
		buff_ptr += sizeof(Register_r15);
		reg_database["r15"] = r15;
		r15d = new(buff_ptr) Register_r15d();
		buff_ptr += sizeof(Register_r15d);
		reg_database["r15d"] = r15d;
		r15w = new(buff_ptr) Register_r15w();
		buff_ptr += sizeof(Register_r15w);
		reg_database["r15w"] = r15w;
		r15b = new(buff_ptr) Register_r15b();
		buff_ptr += sizeof(Register_r15b);
		reg_database["r15b"] = r15b;
		eax->set_parent(rax);
		ax->set_parent(eax);
		al->set_parent(ax);
		ecx->set_parent(rcx);
		cx->set_parent(ecx);
		cl->set_parent(cx);
		edx->set_parent(rdx);
		dx->set_parent(edx);
		dl->set_parent(dx);
		ebx->set_parent(rbx);
		bx->set_parent(ebx);
		bl->set_parent(bx);
		esp->set_parent(rsp);
		sp->set_parent(esp);
		spl->set_parent(sp);
		ebp->set_parent(rbp);
		bp->set_parent(ebp);
		bpl->set_parent(bp);
		esi->set_parent(rsi);
		si->set_parent(esi);
		sil->set_parent(si);
		edi->set_parent(rdi);
		di->set_parent(edi);
		dil->set_parent(di);
		r8d->set_parent(r8);
		r8w->set_parent(r8d);
		r8b->set_parent(r8w);
		r9d->set_parent(r9);
		r9w->set_parent(r9d);
		r9b->set_parent(r9w);
		r10d->set_parent(r10);
		r10w->set_parent(r10d);
		r10b->set_parent(r10w);
		r11d->set_parent(r11);
		r11w->set_parent(r11d);
		r11b->set_parent(r11w);
		r12d->set_parent(r12);
		r12w->set_parent(r12d);
		r12b->set_parent(r12w);
		r13d->set_parent(r13);
		r13w->set_parent(r13d);
		r13b->set_parent(r13w);
		r14d->set_parent(r14);
		r14w->set_parent(r14d);
		r14b->set_parent(r14w);
		r15d->set_parent(r15);
		r15w->set_parent(r15d);
		r15b->set_parent(r15w);
	}
	~TargetBasex86_64() noexcept override{
		r15b->~Register_r15b();
		r15w->~Register_r15w();
		r15d->~Register_r15d();
		r15->~Register_r15();
		r14b->~Register_r14b();
		r14w->~Register_r14w();
		r14d->~Register_r14d();
		r14->~Register_r14();
		r13b->~Register_r13b();
		r13w->~Register_r13w();
		r13d->~Register_r13d();
		r13->~Register_r13();
		r12b->~Register_r12b();
		r12w->~Register_r12w();
		r12d->~Register_r12d();
		r12->~Register_r12();
		r11b->~Register_r11b();
		r11w->~Register_r11w();
		r11d->~Register_r11d();
		r11->~Register_r11();
		r10b->~Register_r10b();
		r10w->~Register_r10w();
		r10d->~Register_r10d();
		r10->~Register_r10();
		r9b->~Register_r9b();
		r9w->~Register_r9w();
		r9d->~Register_r9d();
		r9->~Register_r9();
		r8b->~Register_r8b();
		r8w->~Register_r8w();
		r8d->~Register_r8d();
		r8->~Register_r8();
		dil->~Register_dil();
		di->~Register_di();
		edi->~Register_edi();
		rdi->~Register_rdi();
		sil->~Register_sil();
		si->~Register_si();
		esi->~Register_esi();
		rsi->~Register_rsi();
		bpl->~Register_bpl();
		bp->~Register_bp();
		ebp->~Register_ebp();
		rbp->~Register_rbp();
		spl->~Register_spl();
		sp->~Register_sp();
		esp->~Register_esp();
		rsp->~Register_rsp();
		bl->~Register_bl();
		bx->~Register_bx();
		ebx->~Register_ebx();
		rbx->~Register_rbx();
		dl->~Register_dl();
		dx->~Register_dx();
		edx->~Register_edx();
		rdx->~Register_rdx();
		cl->~Register_cl();
		cx->~Register_cx();
		ecx->~Register_ecx();
		rcx->~Register_rcx();
		al->~Register_al();
		ax->~Register_ax();
		eax->~Register_eax();
		rax->~Register_rax();
		delete[] buff;
	}
};
enum class InstrIDx86_64 : uint32_t{
	mov64rr,
	mov32rr,
	mov16rr,
	mov8rr,
	mul64r,
	mul32r,
	mul16r,
	mul8r
};
struct Instrmov64rr : public TargetInstruction{
	RegisterBase* dest;
	RegisterBase* src;
	Instrmov64rr(RegisterBase* _dest_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mov64rr, {.result = _dest_, .clobbers = {}, .clobberSize = 0}), dest(_dest_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "movq %{}, %{}", src->name, dest->name);
	}
};
struct Instrmov32rr : public TargetInstruction{
	RegisterBase* dest;
	RegisterBase* src;
	Instrmov32rr(RegisterBase* _dest_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mov32rr, {.result = _dest_, .clobbers = {}, .clobberSize = 0}), dest(_dest_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "movl %{}, %{}", src->name, dest->name);
	}
};
struct Instrmov16rr : public TargetInstruction{
	RegisterBase* dest;
	RegisterBase* src;
	Instrmov16rr(RegisterBase* _dest_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mov16rr, {.result = _dest_, .clobbers = {}, .clobberSize = 0}), dest(_dest_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "movw %{}, %{}", src->name, dest->name);
	}
};
struct Instrmov8rr : public TargetInstruction{
	RegisterBase* dest;
	RegisterBase* src;
	Instrmov8rr(RegisterBase* _dest_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mov8rr, {.result = _dest_, .clobbers = {}, .clobberSize = 0}), dest(_dest_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "movb %{}, %{}", src->name, dest->name);
	}
};
struct Instrmul64r : public TargetInstruction{
	Register_rax* rax;
	Register_rdx* rdx;
	RegisterBase* src;
	Instrmul64r(Register_rax* _rax_, Register_rdx* _rdx_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mul64r, {.result = _rax_, .clobbers = {_rdx_}, .clobberSize = 1}), rax(_rax_), rdx(_rdx_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "mulq %{}", src->name);
	}
};
struct Instrmul32r : public TargetInstruction{
	Register_eax* eax;
	Register_edx* edx;
	RegisterBase* src;
	Instrmul32r(Register_eax* _eax_, Register_edx* _edx_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mul32r, {.result = _eax_, .clobbers = {_edx_}, .clobberSize = 1}), eax(_eax_), edx(_edx_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "mull %{}", src->name);
	}
};
struct Instrmul16r : public TargetInstruction{
	Register_ax* ax;
	Register_dx* dx;
	RegisterBase* src;
	Instrmul16r(Register_ax* _ax_, Register_dx* _dx_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mul16r, {.result = _ax_, .clobbers = {_dx_}, .clobberSize = 1}), ax(_ax_), dx(_dx_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "mulw %{}", src->name);
	}
};
struct Instrmul8r : public TargetInstruction{
	Register_al* al;
	RegisterBase* src;
	Instrmul8r(Register_al* _al_, RegisterBase* _src_) : TargetInstruction((uint32_t)InstrIDx86_64::mul8r, {.result = _al_, .clobbers = {}, .clobberSize = 0}), al(_al_), src(_src_){};
	void emit(std::ostream& os){
		std::format_to(std::ostreambuf_iterator<char>(os), "mulb %{}", src->name);
	}
};
}
}

#endif
